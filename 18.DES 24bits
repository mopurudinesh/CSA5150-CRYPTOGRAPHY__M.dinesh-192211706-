#include <stdio.h>
#include <string.h>

#define KEY_SIZE 56
#define SUBKEY_SIZE 48
#define NUM_SUBKEYS 16

void permute(char *k, int arr[], int n) {
    char permutation[KEY_SIZE];
    for (int i = 0; i < n; i++) {
        permutation[i] = k[arr[i] - 1];
    }
    strcpy(k, permutation);
}

void shift_left(char *k, int nth_shifts) {
    char s[KEY_SIZE];
    for (int i = 0; i < nth_shifts; i++) {
        for (int j = 1; j < strlen(k); j++) {
            s[j - 1] = k[j];
        }
        s[strlen(k) - 1] = k[0];
        strcpy(k, s);
    }
}

void key_generation(char *key, char subkeys[][SUBKEY_SIZE]) {
    int pc1[] = {57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36};
    int pc2[] = {14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2};
    int left_shifts[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

    char c[KEY_SIZE], d[KEY_SIZE];
    for (int i = 0; i < KEY_SIZE; i++) {
        c[i] = key[pc1[i] - 1];
        d[i] = key[pc1[i + 28] - 1];
    }

    for (int i = 0; i < NUM_SUBKEYS; i++) {
        shift_left(c, left_shifts[i]);
        shift_left(d, left_shifts[i]);
        for (int j = 0; j < SUBKEY_SIZE / 2; j++) {
            subkeys[i][j] = c[pc2[j] - 1];
        }
        for (int j = SUBKEY_SIZE / 2; j < SUBKEY_SIZE; j++) {
            subkeys[i][j] = d[pc2[j - 24] - 1];
        }
        printf("K%d: ", i + 1);
        for (int j = 0; j < SUBKEY_SIZE; j++) {
            printf("%c", subkeys[i][j] == '0'? '0' : '1');
        }
        printf("\n");
    }
}

int main() {
    char key[KEY_SIZE + 1] = "your_56_bit_key_here";
    char subkeys[NUM_SUBKEYS][SUBKEY_SIZE];
    key_generation(key, subkeys);
    return 0;
}
